#version 460
#extension GL_EXT_ray_tracing:require
#extension GL_GOOGLE_include_directive:enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64:require

#include "device_host.h"
#include "payload.h"
#include "dh_bindings.h"
#include "nvvkhl/shaders/random.h"
#include "nvvkhl/shaders/constants.h"

// clang-format off
layout(location=0)rayPayloadEXT HitPayload payload;

layout(set=0,binding=BRtTlas)uniform accelerationStructureEXT topLevelAS;
layout(set=0,binding=BRtOutImage,rgba32f)uniform image2D image;
layout(set=0,binding=BRtFrameInfo)uniform FrameInfo_
{
    FrameInfo frameInfo;
};
// clang-format on

layout(push_constant)uniform RtxPushConstant_
{
    PushConstant pc;
};

void main()
{
    payload=initPayload();
    
    const vec2 pixelCenter=vec2(gl_LaunchIDEXT.xy);
    const vec2 inUV=pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    const vec2 d=inUV*2.-1.;
    
    const vec4 origin=frameInfo.viewInv*vec4(0.,0.,0.,1.);
    const vec4 target=frameInfo.projInv*vec4(d.x,d.y,.01,1.);//NOTE - vulkan NDC的z范围是[0,1]，0.01是近裁面
    const vec4 direction=frameInfo.viewInv*vec4(normalize(target.xyz),0.);
    const uint rayFlags=gl_RayFlagsCullBackFacingTrianglesEXT;
    const float tMin=.001;
    const float tMax=INFINITE;
    
    traceRayEXT(topLevelAS,// acceleration structure
        rayFlags,// rayFlags
        0xFF,// cullMask
        0,// sbtRecordOffset
        0,// sbtRecordStride
        0,// missIndex
        origin.xyz,// ray origin
        tMin,// ray min range
        direction.xyz,// ray direction
        tMax,// ray max range
        0// payload (location = 0)
    );
    
    imageStore(image,ivec2(gl_LaunchIDEXT.xy),vec4(payload.color,1.F));
}

/**NOTE - 2.Vulkan中的描述符类型
Vulkan中有多种描述符类型，每种类型对应不同的资源管理方式：
缓冲区描述符（Uniform Buffer,Storage Buffer）：
需要使用统一块进行声明和绑定。
适用于存储大量数据，如UBO、SSBO（Storage Buffer Object）。
非缓冲区描述符（Sampler,Sampled Image,Storage Image,Acceleration Structure）：
可以直接作为uniform或其他适当的存储类声明，无需统一块。
适用于纹理采样器、图像资源、加速结构等。
*/
