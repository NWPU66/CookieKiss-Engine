#version 460
#extension GL_GOOGLE_include_directive:enable
#extension GL_EXT_shader_explicit_arithmetic_types:enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8:enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16:enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32:enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64:enable

#include "animate_heightmap.h"

layout(local_size_x=ANIMATION_WORKGROUP_SIZE,local_size_y=ANIMATION_WORKGROUP_SIZE)in;

layout(set=0,binding=BINDING_ANIM_IMAGE_A_HEIGHT,r32f)uniform image2D heightmapA;
layout(set=0,binding=BINDING_ANIM_IMAGE_B_HEIGHT,r32f)uniform image2D heightmapB;
layout(set=0,binding=BINDING_ANIM_IMAGE_A_VELOCITY,r32f)uniform image2D velocityA;
layout(set=0,binding=BINDING_ANIM_IMAGE_B_VELOCITY,r32f)uniform image2D velocityB;

layout(push_constant)uniform CompressPushConstants_
{
    AnimatePushConstants pc;
};

float heightRead(ivec2 coord)
{
    float value=pc.writeToA!=0?imageLoad(heightmapB,coord).r:imageLoad(heightmapA,coord).r;
    return(value-HEIGHTMAP_OFFSET)*HEIGHTMAP_RANGE;
}

float velocityRead(ivec2 coord)
{
    return(pc.writeToA!=0?imageLoad(velocityB,coord).r:imageLoad(velocityA,coord).r);
}

void heightWrite(ivec2 coord,float value)
{
    if(pc.writeToA!=0)
    imageStore(heightmapA,coord,vec4(value/HEIGHTMAP_RANGE+HEIGHTMAP_OFFSET));
    else
    imageStore(heightmapB,coord,vec4(value/HEIGHTMAP_RANGE+HEIGHTMAP_OFFSET));
}

void velocityWrite(ivec2 coord,float value)
{
    if(pc.writeToA!=0)
    imageStore(velocityA,coord,vec4(value));
    else
    imageStore(velocityB,coord,vec4(value));
}

void main(){
    ivec2 coord=ivec2(gl_GlobalInvocationID.xy);
    
    // Read the central heights
    float height=heightRead(coord);
    float velocity=velocityRead(coord);
    
    // Small convolution kernel to find neighboring water height. Using shared
    // memory would make this faster.
    const int radius=2;
    float totalWeight=0;
    float neighbourVelocity=0;
    float neighbourHeight=0;
    ivec2 offset;
    for(offset.x=-radius;offset.x<=radius;++offset.x)
    {
        for(offset.y=-radius;offset.y<=radius;++offset.y)
        {
            if(offset==vec2(0)){continue;}
            
            ivec2 sampleCoord=coord+offset;
            float weight=1./(1.+dot(vec2(offset),vec2(offset)));// weight = 1 / r**2
            totalWeight+=weight;
            
            if(sampleCoord.x<0||sampleCoord.y<0||sampleCoord.x>=pc.resolution||sampleCoord.y>=pc.resolution)
            continue;
            
            neighbourVelocity+=velocityRead(sampleCoord)*weight;
            neighbourHeight+=heightRead(sampleCoord)*weight;
        }
        neighbourVelocity/=totalWeight;
        neighbourHeight/=totalWeight;
        
        // 人为地加速使高度趋于0。保持水面高度在零附近。似乎有点像增加重力，产生更快的振荡。
        neighbourHeight*=.998;//向0靠近
        
        // Raise the water height with the mouse
        float penRadius=4.;// pixels
        float penPower=.3;// 1 forces the level to the floor
        float penDistance=length(pc.mouse-vec2(coord));
        float penShape=smoothstep(penRadius-1.,penRadius,penDistance);
        if(penDistance<penRadius){
            // 间接调整高度会产生更平滑的结果，因为
            // 水面高度自然地向邻近高度加速。
            neighbourHeight=min(neighbourHeight,penShape-HEIGHTMAP_RANGE*.5*penPower);
        }
        
        // Loosely based on: [Mueller, Matthias] "Fast Water Simulation for Games Using Height Fields, GDC2008"
        float dt=pc.deltaTime;
        float h=1./pc.resolution;// column width
        float c=.1*h/dt;// speed waves travel
        float f=c*c*(neighbourHeight-height)*4./(h*h);
        //NOTE - c是波传播的速度，在dt时间内传播一个像素单位的距离
        //utt = c**2 * uxx
        
        //FIXME - 如果是我写的话
        //neighbourHeight不除以totalWeight
        //uxx=neighbourHeight-height*totalWeight
        //f=c**2*uxx
        
        // 在相邻速度的方向施加一个力。出于某种原因，这大大提高了模拟的稳定性。也许这只是增加了更多的阻尼？最好避免计算neighbourVelocity。
        f+=c*c*(neighbourVelocity-velocity)*4./(h*h);
        
        // Mid-point integration
        float dv=f*dt;
        height+=(velocity+dv*.5)*dt;
        velocity+=dv;
        
        // Damping
        velocity*=.999;
        
        // Set edge heights and velocities to zero for watertightness with base
        if(coord.x<1||coord.y<1||coord.x>=pc.resolution-1||coord.y>=pc.resolution-1)
        {
            height=0.;
            velocity=0.;
        }
        
        heightWrite(coord,height);
        velocityWrite(coord,velocity);
    }
}
